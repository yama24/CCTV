# Apache2 Virtual Host Configuration for CCTV System
# Place this file in: /etc/apache2/sites-available/cctv.conf
# Enable with: sudo a2ensite cctv.conf && sudo systemctl reload apache2

# HTTP to HTTPS redirect
<VirtualHost *:80>
    ServerName cctv.yourdomain.com
    ServerAlias www.cctv.yourdomain.com
    
    # Redirect all HTTP traffic to HTTPS
    Redirect permanent / https://cctv.yourdomain.com/
    
    # Optional: Log redirects
    ErrorLog ${APACHE_LOG_DIR}/cctv_error.log
    CustomLog ${APACHE_LOG_DIR}/cctv_access.log combined
</VirtualHost>

# HTTPS Virtual Host
<VirtualHost *:443>
    ServerName cctv.yourdomain.com
    ServerAlias www.cctv.yourdomain.com
    
    # Document root (not used since we're proxying)
    DocumentRoot /var/www/html
    
    # SSL Configuration
    SSLEngine on
    SSLCertificateFile /etc/ssl/certs/cctv.yourdomain.com.crt
    SSLCertificateKeyFile /etc/ssl/private/cctv.yourdomain.com.key
    SSLCertificateChainFile /etc/ssl/certs/ca-certificates.crt
    
    # Modern SSL Configuration
    SSLProtocol all -SSLv3 -TLSv1 -TLSv1.1
    SSLCipherSuite ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384
    SSLHonorCipherOrder off
    SSLSessionTickets off
    
    # Security Headers
    Header always set X-Content-Type-Options nosniff
    Header always set X-Frame-Options SAMEORIGIN
    Header always set X-XSS-Protection "1; mode=block"
    Header always set Referrer-Policy "strict-origin-when-cross-origin"
    Header always set Permissions-Policy "geolocation=(), microphone=(), camera=()"
    
    # HSTS (HTTP Strict Transport Security)
    Header always set Strict-Transport-Security "max-age=63072000; includeSubDomains; preload"
    
    # Content Security Policy for enhanced security
    Header always set Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: blob:; media-src 'self' blob:; connect-src 'self' ws: wss:; font-src 'self'"
    
    # Reverse Proxy Configuration
    ProxyPreserveHost On
    ProxyRequests Off
    
    # Proxy all requests to Node.js application
    ProxyPass / http://127.0.0.1:3000/
    ProxyPassReverse / http://127.0.0.1:3000/
    
    # WebSocket Support for Socket.IO
    RewriteEngine On
    RewriteCond %{HTTP:Upgrade} websocket [NC]
    RewriteCond %{HTTP:Connection} upgrade [NC]
    RewriteRule ^/?(.*) "ws://127.0.0.1:3000/$1" [P,L]
    
    # Proxy Socket.IO requests
    ProxyPass /socket.io/ http://127.0.0.1:3000/socket.io/
    ProxyPassReverse /socket.io/ http://127.0.0.1:3000/socket.io/
    
    # Set headers for WebSocket connections
    <LocationMatch "/socket\.io/">
        ProxyPass http://127.0.0.1:3000/socket.io/
        ProxyPassReverse http://127.0.0.1:3000/socket.io/
        ProxyPassReverse ws://127.0.0.1:3000/socket.io/
        ProxyPassReverseRewrite Off
        ProxyPreserveHost On
        ProxyHTMLEnable Off
        ProxyHTMLMeta Off
    </LocationMatch>
    
    # Rate limiting (requires mod_evasive)
    # DOSHashTableSize    2048
    # DOSPageCount        10
    # DOSPageInterval     1
    # DOSSiteCount        50
    # DOSSiteInterval     1
    # DOSBlockingPeriod   86400
    
    # Logging
    ErrorLog ${APACHE_LOG_DIR}/cctv_ssl_error.log
    CustomLog ${APACHE_LOG_DIR}/cctv_ssl_access.log combined
    
    # Log level for debugging (change to 'warn' in production)
    LogLevel info ssl:warn
    
</VirtualHost>

# Required Apache2 modules:
# sudo a2enmod ssl
# sudo a2enmod headers
# sudo a2enmod proxy
# sudo a2enmod proxy_http
# sudo a2enmod proxy_wstunnel
# sudo a2enmod rewrite

# Installation steps:
# 1. Copy this file to /etc/apache2/sites-available/cctv.conf
# 2. Replace 'cctv.yourdomain.com' with your actual domain name
# 3. Update SSL certificate paths to your actual certificate files
# 4. Enable required modules: sudo a2enmod ssl headers proxy proxy_http proxy_wstunnel rewrite
# 5. Enable the site: sudo a2ensite cctv.conf
# 6. Test configuration: sudo apache2ctl configtest
# 7. Reload Apache: sudo systemctl reload apache2