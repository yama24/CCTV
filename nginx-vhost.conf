# Nginx Virtual Host Configuration for CCTV System
# Place this file in: /etc/nginx/sites-available/cctv
# Enable with: sudo ln -s /etc/nginx/sites-available/cctv /etc/nginx/sites-enabled/ && sudo systemctl reload nginx

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;
limit_req_zone $binary_remote_addr zone=api:10m rate=30r/m;
limit_req_zone $binary_remote_addr zone=general:10m rate=10r/s;

# Upstream definition for Node.js application
upstream cctv_backend {
    server 127.0.0.1:3000 max_fails=3 fail_timeout=30s;
    keepalive 32;
}

# HTTP to HTTPS redirect
server {
    listen 80;
    listen [::]:80;
    server_name cctv.yourdomain.com www.cctv.yourdomain.com;
    
    # Security headers even for redirects
    add_header X-Content-Type-Options nosniff always;
    add_header X-Frame-Options SAMEORIGIN always;
    
    # Redirect all HTTP requests to HTTPS
    return 301 https://$server_name$request_uri;
}

# HTTPS Virtual Host
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name cctv.yourdomain.com www.cctv.yourdomain.com;
    
    # SSL Configuration
    ssl_certificate /etc/ssl/certs/cctv.yourdomain.com.crt;
    ssl_certificate_key /etc/ssl/private/cctv.yourdomain.com.key;
    ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;
    
    # Modern SSL Configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 1d;
    ssl_session_tickets off;
    
    # OCSP stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # Security Headers
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-Frame-Options SAMEORIGIN always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;
    
    # Content Security Policy
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: blob:; media-src 'self' blob:; connect-src 'self' ws: wss:; font-src 'self'" always;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;
    
    # Client body size for file uploads
    client_max_body_size 50M;
    
    # Timeouts
    proxy_connect_timeout 60s;
    proxy_send_timeout 60s;
    proxy_read_timeout 60s;
    
    # Buffer settings
    proxy_buffering on;
    proxy_buffer_size 8k;
    proxy_buffers 32 8k;
    
    # Proxy headers
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Host $server_name;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    
    # Rate limiting for login attempts
    location /login {
        limit_req zone=login burst=3 nodelay;
        limit_req_status 429;
        
        proxy_pass http://cctv_backend;
        proxy_http_version 1.1;
    }
    
    # Rate limiting for API endpoints
    location /api/ {
        limit_req zone=api burst=10 nodelay;
        limit_req_status 429;
        
        proxy_pass http://cctv_backend;
        proxy_http_version 1.1;
    }
    
    # WebSocket support for Socket.IO
    location /socket.io/ {
        limit_req zone=general burst=20 nodelay;
        
        proxy_pass http://cctv_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket specific timeouts
        proxy_read_timeout 86400s;
        proxy_send_timeout 86400s;
    }
    
    # Static files caching (if serving any static content directly)
    location ~* \.(css|js|ico|png|jpg|jpeg|gif|svg|woff|woff2|ttf|eot)$ {
        expires 30d;
        add_header Cache-Control "public, immutable";
        add_header X-Content-Type-Options nosniff always;
        
        # Proxy to Node.js for protected files
        proxy_pass http://cctv_backend;
        proxy_http_version 1.1;
    }
    
    # Security: Block access to sensitive files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    location ~ /(package\.json|server\.js|test-.*\.js|node_modules) {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Default location - proxy everything else to Node.js
    location / {
        limit_req zone=general burst=20 nodelay;
        
        proxy_pass http://cctv_backend;
        proxy_http_version 1.1;
        
        # Real IP for logging and rate limiting
        set_real_ip_from 127.0.0.1;
        set_real_ip_from 10.0.0.0/8;
        set_real_ip_from 172.16.0.0/12;
        set_real_ip_from 192.168.0.0/16;
        real_ip_header X-Forwarded-For;
        real_ip_recursive on;
    }
    
    # Custom error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    # Logging
    access_log /var/log/nginx/cctv_access.log combined;
    error_log /var/log/nginx/cctv_error.log warn;
    
}

# Optional: Separate server block for monitoring/health checks
server {
    listen 127.0.0.1:8080;
    server_name localhost;
    
    location /nginx-status {
        stub_status on;
        access_log off;
        allow 127.0.0.1;
        deny all;
    }
    
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
}

# Installation and configuration steps:
# 
# 1. Copy this file to /etc/nginx/sites-available/cctv
# 
# 2. Replace 'cctv.yourdomain.com' with your actual domain name
# 
# 3. Update SSL certificate paths:
#    - /etc/ssl/certs/cctv.yourdomain.com.crt
#    - /etc/ssl/private/cctv.yourdomain.com.key
# 
# 4. Create symbolic link to enable site:
#    sudo ln -s /etc/nginx/sites-available/cctv /etc/nginx/sites-enabled/
# 
# 5. Test configuration:
#    sudo nginx -t
# 
# 6. Reload Nginx:
#    sudo systemctl reload nginx
# 
# 7. Optional: Install fail2ban for additional security:
#    sudo apt install fail2ban
#    
# 8. Configure firewall (ufw example):
#    sudo ufw allow 22/tcp
#    sudo ufw allow 80/tcp  
#    sudo ufw allow 443/tcp
#    sudo ufw enable